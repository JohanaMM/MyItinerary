var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var OpeningRepertoire = /** @class */ (function () {
    function OpeningRepertoire() {
        this.tree = {
            node: {
                line: [],
                meta: {}
            },
            children: new Map()
        };
    }
    OpeningRepertoire.prototype.add = function (move) {
        var line = move.line;
        var tree = this.tree;
        // Tree structure construction
        for (var i = 0; i < line.length; ++i) {
            var currentMoveLabel = line[i];
            if (tree.children.has(currentMoveLabel)) {
                tree = tree.children.get(currentMoveLabel);
            }
            else {
                var subtree = {
                    node: {
                        line: line.slice(0, i + 1),
                        meta: {}
                    },
                    children: new Map()
                };
                tree.children.set(currentMoveLabel, subtree);
                tree = subtree;
            }
        }
        // Move appending
        tree.node.meta = move.meta;
    };
    OpeningRepertoire.prototype.at = function (line) {
        var e_1, _a;
        var tree = this.tree;
        try {
            for (var line_1 = __values(line), line_1_1 = line_1.next(); !line_1_1.done; line_1_1 = line_1.next()) {
                var moveNotation = line_1_1.value;
                // Line not found in the repertoire
                if (tree.children.has(moveNotation) === false)
                    return undefined;
                tree = tree.children.get(moveNotation);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (line_1_1 && !line_1_1.done && (_a = line_1["return"])) _a.call(line_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return tree;
    };
    OpeningRepertoire.toJSON = function (repertoire) {
        function transform(tree) {
            var e_2, _a;
            var children = {};
            try {
                for (var _b = __values(tree.children.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), key = _d[0], child = _d[1];
                    children[key] = transform(child);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return {
                node: tree.node,
                children: children
            };
        }
        return JSON.stringify(transform(repertoire.tree));
    };
    OpeningRepertoire.prototype.toJSON = function () {
        return OpeningRepertoire.toJSON(this);
    };
    OpeningRepertoire.fromJSON = function (json) {
        var tree = JSON.parse(json);
        function transform(tree) {
            var e_3, _a;
            var children = new Map();
            try {
                for (var _b = __values(Object.entries(tree.children)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), key = _d[0], child = _d[1];
                    children.set(key, transform(child));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return {
                node: tree.node,
                children: children
            };
        }
        var repertoire = new OpeningRepertoire();
        repertoire.tree = transform(tree);
        return repertoire;
    };
    return OpeningRepertoire;
}());
export { OpeningRepertoire };
